For an html version of this readme run 'asciidoc README.asciidoc'.

DTGov Demos: Release Workflow
-----------------------------

Summary
~~~~~~~

This demo shows how DTGov can start a Project Workflow via a simple Maven build.  
This demo contains two projects:

* project: a very simple maven module with artifactId of "project".
* service: a maven module containing the Hello World Service API, expressed in WSDL.

The goal is to show that an upload of a pom.xml with artifactId of "project" 
kicks of a workflow of type overlord.demo.SimpleReleaseProcess.png. 
 
[[figure-release-workflow]]
.Release Process Workflow.
image::SimpleReleaseProcess.png[Release Process Workflow]


Requirements
~~~~~~~~~~~~

Email Server
^^^^^^^^^^^^
To receive email notifications you need a running email server. The connection settings can be 
provided in the dtgov.properties file. It uses the _mail-smtp_ settings defined in 
the _standalone/configuration/standalone.xml_
....
<outbound-socket-binding name="mail-smtp">
   <remote-destination host="localhost" port="25"/>
</outbound-socket-binding>
....
The easiest way to fulfill this requirements is to
run the FakeSMTP server (http://nilhcem.github.io/FakeSMTP/), since this will list emails
send to all email addresses. Just download it and run   
....
sudo java -jar fakeSMTP-1.0.jar 
....

Users and Roles
^^^^^^^^^^^^^^^
This demo uses the roles _dev_, _qa_, _stage_ and _prod_. By default the _admin_ user
has all of these roles, see the _standalone/configuration/application_roles.properties_
....
admin=overlorduser,admin.sramp,dev,qa,stage,prod
....
which means that the admin will see tasks for all roles in this example. Follow the instructions
in the _application-users.properties_ to add users. Note that a new new user needs at least
the _overlorduser_ role.

Authentication Settings
^^^^^^^^^^^^^^^^^^^^^^^
Be aware that you must supply the maven build with credentials for your S-RAMP repository.  This
can be done by adding a section to your settings.xml file (or by providing a custom settings.xml
on the mvn command line using the '-s' argument).

For more information see:  http://maven.apache.org/settings.html

Your settings.xml file should contain two additional server entries in the servers section:
....
    <server>
      <id>local-sramp-repo</id>
      <username>admin</username>
      <password>YOUR-PASSWORD</password>
    </server>
    <server>
      <id>local-sramp-repo-snapshots</id>
      <username>admin</username>
      <password>YOUR-PASSWORD</password>
    </server>
....

How It Works
~~~~~~~~~~~~

Deploying the 'artifacts' JAR to S-RAMP
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

To get this demo working you must be running the DTGov server and the S-RAMP repository (see documentation 
for the DTGov and S-RAMP projects to learn how to run the S-RAMP repository).

The first step is to build and deploy all artifacts to S-RAMP using Maven.
The demo is configured to run against the default security settings found in
the distribution.

IMPORTANT: Authentication settings in your .m2/settings.xml are required.
....
$ mvn -Pdemo clean deploy
....

The _-Pdemo_ flag will enable the 'demo' profile, which tells the Maven **distributionManagement** to
point to your local S-RAMP repository (http://localhost:8080/s-ramp-server/).  Therefore you need to
be running S-RAMP on port 8080 and deployed as the 's-ramp-atom' context.

The build should complete successfully and on the server you should see logging along the lines of
....
09:04:10,929 INFO  [org.overlord.sramp.governance.QueryExecutor] (EJB default - 5) Starting workflow overlord.demo.SimpleReleaseProcess for artifact 44021610-f85e-48bf-9a1c-9adcdbe485b6
....

At this point there should be a number of artifacts stored in the S-RAMP repository.  You can verify
that by deploying the "s-ramp-ui" project and then navigating to http://localhost:8080/s-ramp-ui (or
the appropriate URL for you).

You should see the following primary artifacts in the S-RAMP repository:

* dtgov-demos-switchyard-VERSION.jar
* dtgov-demos-switchyard-VERSION.pom
* OrderService.wsdl
* beans.xml
* orders
* org.overlord.sramp.demos.switchyard.service.InventoryService
* org.overlord.sramp.demos.switchyard.service.InventoryServiceBean
* org.overlord.sramp.demos.switchyard.service.Order
* org.overlord.sramp.demos.switchyard.service.OrderAck
* org.overlord.sramp.demos.switchyard.service.OrderService
* org.overlord.sramp.demos.switchyard.service.OrderServiceBean
* org.overlord.sramp.demos.switchyard.service.Transformers

Where the OrderService.wsdl, beans.xml, orders as well as some class
With the query defined in the dtgov.properties:
....
governance.queries=/s-ramp/ext/SwitchYardApplication|overlord.demo.SimpleReleaseProcess|DeploymentUrl={governance.url}/rest/deploy/{target}/{uuid}::NotificationUrl={governance.url}/rest/notify/email/{group}/deployed/{target}/{uuid}::UpdateMetaDataUrl={governance.url}/rest/update/{name}/{value}/{uuid}....
....
it will start a _SimpleReleaseProcess_ workflow when a _SwitchYardApplication_
lands in the repository. You should see a custom property getting created which should
look similar to 
....
workflowProcessId=overlord.demo.SimpleReleaseProcess_0:workflowParameters=DeploymentUrl=http://localhost:8080/dtgov/res...
....

Note that the definition of the 'overlord.demo.SimpleReleaseProcess' lives in the
SRAMPPackage in the dtgov-workflow.jar. If you want to update the workflow you
need to use eclipse tooling to modify the bpmn, build and upload a new dtgov-worflow.jar
to S-RAMP. The GAV settings are defined in the dtgov.properties file.


Artifact Deployment
~~~~~~~~~~~~~~~~~~~

The workflow (and the deployment ontology) specifies four different environments:

 * dev - development: machine hosting deployed released artifact before they go to QA. Developers
 can do a quick test to make sure things work on more then just their desk.
 * qa - quality assurance: machine hosting deployed released artifacts so that they can
 go through the testing process.
 * stage - staging: an environment identical to production where qa'ed artifacts can be tested
 on the real hardware and with interactions with other systems.
 * prod - production: the final place where the artifacts are deployed and run
 
 When the _SimpleReleaseProcess_ is instantiated it deploy the artifact to the _dev_ environment.
 The workflow makes a POST call to DeploymentUrl={governance.url}/rest/deploy/{target}/{uuid}
 where
 * {governance.url} is location where the DTGov REST API is hosted; this defaults to 'http://localhost:8080/dtgov'
 and can be overridden in the dtgov.properties.
 * {target} is the name of the deployment target which defined in the dtgov.properties and is
 referenced in the 'Deploy to Dev' task. 
 * {uuid} is the UUID of the artifact which is set as a process parameter in the _SimpleReleaseProcess_ 
 instance at creation time.
 
In this case, we assume the dev target is defined as 
....
governance.targets=  dev|http://www.jboss.org/overlord/deployment-status.owl#InDev|copy|/tmp/dev/jbossas7/standalone/deployments
....
where 
 * dev: name of the target
 * http://www.jboss.org/overlord/deployment-status.owl#InDev: classification when deployed to Dev
 * copy: use file copy
 * /tmp/dev/jbossas7/standalone/deployments: deploy directory
 
We assume there is jbossas7 server running in /tmp/dev/jbossas7, and thus it uses a 
simple file copy to place the artifact in /tmp/dev/jbossas7/standalone/deployments. 
The appserver will take of deploying the artifact and on the server we should see logging along
the lines of
....
09:04:11,168 INFO  [org.overlord.dtgov.jbpm.util.HttpClientWorkItemHandler] (EJB default - 5) Calling POST TO: http://localhost:8080/dtgov/rest/deploy/dev/44021610-f85e-48bf-9a1c-9adcdbe485b6
09:04:11,274 INFO  [org.jboss.resteasy.cdi.CdiInjectorFactory] (http-/127.0.0.1:8080-13) Found BeanManager at java:comp/BeanManager
09:04:11,300 INFO  [org.jboss.resteasy.spi.ResteasyDeployment] (http-/127.0.0.1:8080-13) Deploying javax.ws.rs.core.Application: class org.overlord.sramp.governance.services.GovernanceApplication$Proxy$_$$_WeldClientProxy
09:04:12,170 INFO  [org.overlord.dtgov.jbpm.util.HttpClientWorkItemHandler] (EJB default - 5) reply={status=success, target=COPY:/tmp/dev/jbossas7/standalone/deployments/dtgov-demos-switchyard-2.0.0-SNAPSHOT.jar}
....
 
 
Classify as DevTest
~~~~~~~~~~~~~~~~~~~
The next task _Classify #DevTest_ calls a REST service in DTGov using endpoint using a PUT to:

UpdateMetaDataUrl={governance.url}/rest/update/{name}/{value}/{uuid}

where
 * {governance.url} is location where the DTGov REST API is hosted; this defaults to 'http://localhost:8080/dtgov'
 and can be overridden in the dtgov.properties.
 * {name} is the type which is 'classification' in this case. This is set in the task.
 * {value} is the value of the classification which is _http://www.jboss.org/overlord/deployment-status.owl#DevTest_
 * {uuid} is the UUID of the artifact which is set as a process parameter in the _SimpleReleaseProcess_ 
 instance at creation time.

which adds the #DevTest classification onto the artifact. You can verify by navigating to this details
of this artifact in the s-ramp-ui or by using the s-ramp.sh cli. The logging on the server should read
....
09:04:12,202 INFO  [org.overlord.dtgov.jbpm.util.HttpClientWorkItemHandler] (EJB default - 5) Calling PUT TO: http://localhost:8080/dtgov/rest/update/classification/http%3A*2F*2Fwww.jboss.org*2Foverlord*2Fdeployment-status.owl%23DevTest/44021610-f85e-48bf-9a1c-9adcdbe485b6
09:04:12,414 INFO  [org.overlord.dtgov.jbpm.util.HttpClientWorkItemHandler] (EJB default - 5) reply={artifactName=dtgov-demos-switchyard-2.0.0-20131107.140403-1.jar, artifactCreatedBy=admin, status=success}
....
 

Notify Dev
~~~~~~~~~~
The next task in the  _SimpleReleaseProcess_  is an email notification. The "Notification Task" calls
a REST service in DTGov using a POST to:

NotificationUrl={governance.url}/rest/notify/email/{group}/deployed/{target}/{uuid}

where
 * {governance.url} is location where the DTGov REST API is hosted; this defaults to 'http://localhost:8080/dtgov'
 and can be overridden in the dtgov.properties.
 * {group} is name of the group to which the notification will be send. This is set in the task and
 is is set to _dev_ the first go-around.
 * deployed is the name of the notification template.
 * {target} is the name of the deployment target which defined in the dtgov.properties and is
 referenced in the 'Deploy to Dev' task. This info is construct the notification message. 
 * {uuid} is the UUID of the artifact which is set as a process parameter in the _SimpleReleaseProcess_ 
 instance at creation time.

On the server we should see the following logging
....
09:04:12,419 INFO  [org.overlord.dtgov.jbpm.util.HttpClientWorkItemHandler] (EJB default - 5) Calling POST TO: http://localhost:8080/dtgov/rest/notify/email/dev/deployed/dev/44021610-f85e-48bf-9a1c-9adcdbe485b6
09:04:12,862 INFO  [org.overlord.dtgov.jbpm.util.HttpClientWorkItemHandler] (EJB default - 5) reply={status=success}
....
By default an email is sent the server _localhost_ at port 25. By default the TO address used
is _{group}@example.com_, which in this case is _dev@example.com_. The default FROM address used
is _overlord@example.com_. If you don't want to use _example.com_ then this can be overridden in the
dtgov.properties using key _governance.email.domain_ and _governance.email.from_ for the FROM address.
It is recommended to use an email alias or group to tie the 'group' email to actual email addresses.

The email contains the following info:
....
Subject: [Overlord-dev] dtgov-demos-switchyard-2.0.0-20131106.145057-1.jar
 is deployed

Artifact 6eccc2f4-b687-4882-9a05-fc446bbb8a44 with name 'dtgov-demos-switchyard-2.0.0-20131106.145057-1.jar' has been deployed to target dev.
Please claim this task, test this deployment and set a pass/fail status at the taskform at

http://localhost:8080/dtgov-ui/#taskInbox

--Overlord
....

and Figure <<figure-notification-email>> shows displays the email in the FakeSMTP UI.

[[figure-notification-email]]
.Notification Email in FakeSMTP.
image::NotificationEmail.png[Notification Email to the 'dev' group]

Email templates are deployed in the _dtgov.war/WEB-INF/classes/governance-email-templates_ directory.
The template subject and body picked are _{template}.subject.tmpl_ and _{template}.subject.tmpl}_, which
in this case are _deployed.subject.tmpl_ and _deployed.subject.tmpl_.


Test Dev
~~~~~~~~
Any user in the _dev_ group can now navigate to the taks list, and the user should see at
least one entry

[[figure-task-list]]
.Dev Task List.
image::TaskList.png[Task List for the 'dev' group]

The user can click on this task to arrive at the detail screen:

[[figure-task-detail]]
.Dev Task Detail.
image::TaskDetail.png[Task Detail for the 'Test Dev'task]

The dev user should _claim_ and _start_ the task and then mark as Pass/Fail and _Complete_. The
artifact will get classified as #DevPass and you should see the following logging on the server:
....
09:17:21,161 INFO  [org.overlord.dtgov.jbpm.util.HttpClientWorkItemHandler] (http-/127.0.0.1:8080-39) Calling PUT TO: http://localhost:8080/dtgov/rest/update/classification/http%3A*2F*2Fwww.jboss.org*2Foverlord*2Fdeployment-status.owl%23DevPass/44021610-f85e-48bf-9a1c-9adcdbe485b6
09:17:21,359 INFO  [org.overlord.dtgov.jbpm.util.HttpClientWorkItemHandler] (http-/127.0.0.1:8080-39) reply={artifactName=dtgov-demos-switchyard-2.0.0-20131107.140403-1.jar, artifactCreatedBy=admin, status=success}
....

Gateway
~~~~~~~
Based on the user input during the _Test Dev_ task, a Gateway will now determine where to go 
next:
* PASS - mark as passed in Dev, and send the artifact to QA
* FAIL - mark as failed in Dev and Stop

A PASS will basically rerun the same tasks we just discussed but now in for _qa_, followed
by _stage_ and _prod_. So proceed _Classify as DevTest_, but you need to pretend it reads 
_Classify as QaTest_ and so on.

When you navigate to the detail screen of the dtgov-demos-switchyard-VERSION.jar you should see
the #DevPass, #InQA and #QaTest classifiers set on this artifact.

[[figure-Classifiers]]
.Classifiers.
image::Classifiers.png[Classifiers]


Governing Deployments
~~~~~~~~~~~~~~~~~~~~~
The DTGov console has a screens specifically designed to govern deployment like these. 
Navigate to http://localhost:8080/dtgov-ui/#deployments and select your deployment from the
list.

[[figure-Deployments]]
.Deployments.
image::Deployments.png[Deployments]

From here you can look at the deployment history, the interesting content of the artifact.


This completes this demo.




